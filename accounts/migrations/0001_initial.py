# Generated by Django 4.1 on 2025-02-16 08:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserManagementModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_no', models.CharField(max_length=15, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('address_1', models.TextField(blank=True, null=True)),
                ('address_2', models.TextField(blank=True, null=True)),
                ('landmark', models.TextField(blank=True, null=True)),
                ('city', models.TextField(blank=True, null=True)),
                ('district', models.CharField(choices=[('AR', 'Ariyalur'), ('CH', 'Chennai'), ('CO', 'Coimbatore'), ('CU', 'Cuddalore'), ('DH', 'Dharmapuri'), ('DI', 'Dindigul'), ('EK', 'Erode'), ('KA', 'Kallakurichi'), ('KA2', 'Kancheepuram'), ('KA3', 'Kanniyakumari'), ('KA4', 'Karur'), ('KR', 'Krishnagiri'), ('MA', 'Madurai'), ('NA', 'Nagapattinam'), ('NI', 'Nilgiris'), ('PE', 'Perambalur'), ('PU', 'Pudukkottai'), ('RA', 'Ramanathapuram'), ('SA', 'Salem'), ('SI', 'Sivaganga'), ('TE', 'Tenkasi'), ('TH', 'Thanjavur'), ('TH2', 'Theni'), ('TH3', 'Thoothukudi'), ('TI', 'Tiruchirappalli'), ('TI2', 'Tirunelveli'), ('TI3', 'Tirupathur'), ('TI4', 'Tiruppur'), ('TI5', 'Tiruvallur'), ('TI6', 'Tiruvannamalai'), ('TV', 'Tiruvarur'), ('VE', 'Vellore'), ('VI', 'Viluppuram'), ('VI2', 'Virudhunagar'), ('AL', 'Alappuzha'), ('ER', 'Ernakulam'), ('ID', 'Idukki'), ('KA', 'Kannur'), ('KA2', 'Kasaragod'), ('KO', 'Kollam'), ('KO2', 'Kottayam'), ('KO3', 'Kozhikode'), ('MA', 'Malappuram'), ('PA', 'Palakkad'), ('PA2', 'Pathanamthitta'), ('TH', 'Thiruvananthapuram'), ('TH2', 'Thrissur'), ('WA', 'Wayanad')], max_length=50)),
                ('state', models.CharField(choices=[('TN', 'Tamil Nadu'), ('KL', 'Kerala')], max_length=50)),
                ('pincode', models.CharField(blank=True, max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('profile_pic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.imagemodel')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SellerModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False)),
                ('shop_name', models.CharField(max_length=255)),
                ('shop_address_1', models.TextField()),
                ('shop_address_2', models.TextField()),
                ('shop_landmark', models.TextField()),
                ('GST_no', models.CharField(max_length=50, unique=True)),
                ('GST_expiry_date', models.DateField()),
                ('PAN_no', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('account_no', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('clo_coin', models.PositiveIntegerField(default=0)),
                ('seller_rank', models.CharField(choices=[('1', 'Noob')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_gst', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gst_files', to='core.filemodel')),
                ('file_pan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pan_files', to='core.filemodel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryBoyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False)),
                ('license_no', models.CharField(max_length=50, unique=True)),
                ('clo_coin', models.PositiveIntegerField(default=0)),
                ('delivery_boy_rank', models.CharField(choices=[('1', 'Noob')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.filemodel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clo_coin', models.PositiveIntegerField(default=0)),
                ('customer_rank', models.CharField(choices=[('1', 'Noob')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
